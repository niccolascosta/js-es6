Flash arrow

Antes
let aprovados = avaliacoes
    .filter(function(prova) { return prova.nota >= 7; })
    .map(function(prova) { return prova.aluno.nome;});

Depois

let aprovados = avaliacoes
    .filter(prova => prova.nota >= 7)
    .map(prova => prova.aluno.nome);

Aula 1 ES6 II
No final deste capítulo implementamos uma solução para automatizar o processo de atualização da view toda vez que o modelo mudar.
O que fizemos na verdade foi implementar o padrão de projeto Observer.

O padrão de projeto Observer

Usamos o padrão de projeto Observer toda vez que queremos notificar partes do sistema interessadas toda vez que
um evento importante for disparado em nosso sistema.

No contexto da nossa aplicação, entendemos um evento como o ato de adicionar ou esvaziar nossa lista de negociações.
É a view que está esta interessada em observar esse evento e tomar uma ação, no caso, se atualizar com base no estado mais atual do modelo.

let funcionario = {email: 'abc@abc.com'};
let funcionarioProxy = new Proxy(funcionario,  {

    get(target, prop, receiver) {
        console.log('Armadilha aqui!');
        return target[prop];
        return Reflect.get(target, prop, receiver);
    }

});

get: function(target, prop, receiver) {

            // executa antes da leitura da propriedade
            console.log(`Interceptou ${prop}`);

            // retorna para quem acessou a propriedade seu valor
            return Reflect.get(target, prop, receiver);
        }

set(target, prop, value, receiver) {
            console.log(`A propriedade ${prop} receberá  ${value}`);
            return Reflect.set(target, prop, value, receiver);
        }

Aprendemos lá no jardim de infância em JavaScript a passar parâmetros para funções e métodos. Vejamos um exemplo:

function exibeNomeCompleto(nome, sobrenome) {

  alert(`${nome} ${sobrenome}`);
}

exibeNomeCompleto('Flávio', 'Almeida');

Contudo, podemos conseguir o mesmo resultado sem passar parâmetros para a função:

function exibeNomeCompleto() {

  alert(`${arguments[0]} ${arguments[1]}`);
}

exibeNomeCompleto('Flávio', 'Almeida');
Por mais que nossa função não receba parâmetros, podemos ter acesso aos parâmetros passados através de arguments.
É uma variável implícita que nos dá acesso a todos os parâmetros passados para a função ou método.
É claro que a primeira forma, nomear os parâmetros da função, é menos verbosa e mais legível.
Mas há muitos hacks em JavaScript que podem fazer uso de arguments.